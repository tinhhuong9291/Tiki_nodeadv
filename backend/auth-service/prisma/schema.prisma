generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_AUTH")
}

model User {
  id              String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name      String?        @db.VarChar(50)
  last_name       String?        @db.VarChar(50)
  email           String         @unique @db.VarChar(255)
  password        String         @db.VarChar(255)
  role            String?        @db.VarChar(10)
  phone           String?        @db.VarChar(20)
  gender          String?        @db.VarChar(10)
  avatar          String?
  cover_photo     String?
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @updatedAt @db.Timestamp(6)
  pass_changed_at DateTime?      @db.Timestamp(6)
  status          Boolean?       @default(false)
  address         Address[]
  refresh_tokens  RefreshToken[]
  providers       UserProvider[]
  sessions        UserSession[]
}

model Address {
  address_id    Int       @id @default(autoincrement())
  user_id       String?   @db.Uuid
  address_line1 String    @db.VarChar(255)
  address_line2 String?   @db.VarChar(255)
  city          String    @db.VarChar(100)
  postal_code   String    @db.VarChar(20)
  address_type  String    @db.VarChar(50)
  latitude      Decimal?  @db.Decimal(9, 6)
  longitude     Decimal?  @db.Decimal(9, 6)
  is_removed    Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  User          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model RefreshToken {
  id          Int       @id @default(autoincrement())
  user_id     String?   @db.Uuid
  token       String
  device_info String?
  ip_address  String?   @db.VarChar(45)
  user_agent  String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  User        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model UserSession {
  id         Int       @id @default(autoincrement())
  user_id    String?   @db.Uuid
  login_at   DateTime? @default(now()) @db.Timestamp(6)
  logout_at  DateTime? @db.Timestamp(6)
  user_agent String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  User       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model UserProvider {
  id                       Int       @id @default(autoincrement())
  user_id                  String?   @db.Uuid
  provider                 String    @db.VarChar(50)
  provider_id              String    @db.VarChar(255)
  provider_email           String?   @db.VarChar(100)
  provider_profile_picture String?
  access_token             String?
  refresh_token            String?
  expires_at               DateTime? @db.Timestamp(6)
  created_at               DateTime? @default(now()) @db.Timestamp(6)
  User                     User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
